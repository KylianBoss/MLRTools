name: Build and Release MLR Tools

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".gitignore"

permissions:
  contents: write
  packages: write

jobs:
  release:
    if: contains(github.event.head_commit.message, 'RELEASE')
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0 # This allows access to commit history for release notes

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Get Package Version
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate Release Notes
        id: release_notes
        run: |
          $commits = git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>$null || git rev-list --max-parents=0 HEAD)..HEAD
          $releaseNotes = @"
          That's the new v${{ steps.package_version.outputs.version }} of the app
          "@

          $releaseNotes | Out-File -FilePath release_notes.txt -Encoding UTF8

          # Escape multiline output for GitHub Actions
          $releaseNotes = $releaseNotes -replace '%', '%25' -replace "`n", '%0A' -replace "`r", '%0D'
          echo "notes=$releaseNotes" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Install Dependencies
        run: |
          npm ci
          npm install -g @quasar/cli

      - name: Build Quasar Electron App
        run: |
          quasar build -m electron
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          release_name: Release v${{ steps.package_version.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Create ZIP Archive
        shell: pwsh
        run: |
          $sourcePath = Join-Path "dist" "electron" "Packaged"
          $zipPath = Join-Path "dist" "electron" "MLRTools-v${{ steps.package_version.outputs.version }}.zip"

          if (Test-Path $sourcePath) {
            Write-Host "Creating ZIP archive from: $sourcePath"
            Compress-Archive -Path "$sourcePath\*" -DestinationPath $zipPath -Force
            Write-Host "ZIP created at: $zipPath"
          } else {
            Write-Error "Could not find Packaged directory in dist/electron"
            exit 1
          }

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/electron/MLRTools-v${{ steps.package_version.outputs.version }}.zip
          asset_name: MLRTools-v${{ steps.package_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Generate and Upload latest.yml
        run: |
          $version = "${{ steps.package_version.outputs.version }}"
          $zipPath = "MLRTools-v${version}.zip"
          $zipFullPath = Join-Path "dist" "electron" $zipPath
          $hash = (Get-FileHash $zipFullPath -Algorithm SHA512).Hash.ToLower()
          $size = (Get-Item $zipFullPath).Length

          $yaml = @"
          version: ${version}
          files:
            - url: ${zipPath}
              sha512: ${hash}
              size: ${size}
          path: ${zipPath}
          sha512: ${hash}
          releaseDate: $(Get-Date -Format "yyyy-MM-dd'T'HH:mm:ss.fffZ")
          "@

          $yaml | Out-File -FilePath "dist/electron/latest.yml" -Encoding UTF8
        shell: pwsh

      - name: Upload latest.yml
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/electron/latest.yml
          asset_name: latest.yml
          asset_content_type: application/yaml

      - name: Cleanup Artifacts
        if: always()
        run: |
          Remove-Item -Path "dist" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "release_notes.txt" -Force -ErrorAction SilentlyContinue
        shell: pwsh
